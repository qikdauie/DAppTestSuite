import React, { useEffect, useMemo, useState } from 'react';
import { connectMessenger } from './sdk/messenger-client.js';

const APP_INTENT_BASE = 'https://didcomm.org/app-intent/1.0';

const INTENTS = {
  'Pick Date/Time': 'pick-datetime',
  'Share': 'share',
  'Compose Email': 'compose-email',
  'Open URL': 'open-url',
  'Pick File': 'pick-file',
  'Dial Call': 'dial-call',
  'Pick Contact': 'pick-contact',
  'Pick Location': 'pick-location',
  'Capture Photo': 'capture-photo',
  'Capture Video': 'capture-video',
  'Capture Audio': 'capture-audio',
  'Scan QR': 'scan-qr',
  'Scan Document': 'scan-document',
  'Open Map Navigation': 'open-map-navigation',
  'Add Calendar Event': 'add-calendar-event',
  'Add Contact': 'add-contact',
  'Save To': 'save-to',
  'Print': 'print',
  'Translate': 'translate',
  'Pay': 'pay',
  'Sign': 'sign',
  'Verify Signature': 'verify-signature',
  'Encrypt': 'encrypt',
  'Decrypt': 'decrypt',
};

const DEFAULT_TIMEOUT = 6000;

export default function IntentLab() {
  const [msgr, setMsgr] = useState(null);
  const [myDid, setMyDid] = useState('');
  const [selectedIntentLabel, setSelectedIntentLabel] = useState(Object.keys(INTENTS)[0]);
  const selectedGoalCode = useMemo(() => INTENTS[selectedIntentLabel], [selectedIntentLabel]);

  const [providers, setProviders] = useState({}); // did -> caps
  const [selectedProvider, setSelectedProvider] = useState('');

  // Params
  const [emailTo, setEmailTo] = useState('test@example.com');
  const [emailSubject, setEmailSubject] = useState('Hello from IntentLab');
  const [emailBody, setEmailBody] = useState('This is a test email generated by IntentLab.');
  const [shareText, setShareText] = useState('Shared from IntentLab');
  const [openUrl, setOpenUrl] = useState('https://example.com');
  const [dialNumber, setDialNumber] = useState('+15551234567');
  const [navDestination, setNavDestination] = useState('1600 Amphitheatre Pkwy, Mountain View, CA');
  const [eventTitle, setEventTitle] = useState('Meeting');
  const [eventStartIso, setEventStartIso] = useState(new Date().toISOString().slice(0, 16));
  const [contactName, setContactName] = useState('Alice');
  const [contactPhone, setContactPhone] = useState('+15550001111');
  const [saveFileName, setSaveFileName] = useState('example.txt');
  const [printPages, setPrintPages] = useState('1');
  const [translateText, setTranslateText] = useState('Hello world');
  const [translateTo, setTranslateTo] = useState('es');
  const [payAmount, setPayAmount] = useState('9.99');
  const [payCurrency, setPayCurrency] = useState('USD');
  const [signPayload, setSignPayload] = useState('payload-to-sign');
  const [verifyPayload, setVerifyPayload] = useState('payload-to-verify');
  const [verifySignature, setVerifySignature] = useState('sig:payload-to-verify');
  const [encryptPlaintext, setEncryptPlaintext] = useState('secret');
  const [decryptCiphertext, setDecryptCiphertext] = useState('ct:secret');

  const [waitForResult, setWaitForResult] = useState(true);
  const [timeoutMs, setTimeoutMs] = useState(String(DEFAULT_TIMEOUT));

  const [sending, setSending] = useState(false);
  const [result, setResult] = useState(null);
  const [discovering, setDiscovering] = useState(false);
  const [pendingUiRequest, setPendingUiRequest] = useState(null); // {correlationId, goalCode, params}

  // Listen for SW-driven UI prompts for interactive provider behavior
  useEffect(() => {
    function onMessage(evt) {
      const data = evt.data || {};
      if (data.kind !== 'intent-ui-request') return;
      setPendingUiRequest({ correlationId: data.correlationId, ...data.payload });
    }
    // If controller isn't ready yet, hook when ready
    if (navigator.serviceWorker) {
      navigator.serviceWorker.addEventListener('message', onMessage);
      navigator.serviceWorker.ready.then(reg => {
        // Some browsers dispatch to reg.active
        reg?.active?.addEventListener?.('message', onMessage);
      }).catch(() => {});
    }
    return () => {
      try { navigator.serviceWorker?.removeEventListener('message', onMessage); } catch {}
    };
  }, []);

  async function postToServiceWorker(message) {
    try {
      // Fast path: controller
      const ctrl = navigator.serviceWorker?.controller;
      if (ctrl) {
        console.log('postToServiceWorker -> controller.postMessage');
        ctrl.postMessage(message);
        return true;
      }

      // Race helper with timeout so UI never hangs
      const withTimeout = (p, ms = 700) => Promise.race([
        p.catch(() => null),
        new Promise(res => setTimeout(() => res(null), ms))
      ]);

      // Try to find any registration quickly
      let reg = null;
      reg = await withTimeout(navigator.serviceWorker.getRegistration('/')); // current scope
      if (!reg) {
        const regs = await withTimeout(navigator.serviceWorker.getRegistrations());
        if (Array.isArray(regs)) {
          reg = regs.find(r => (r?.active?.scriptURL?.includes('/worker/sw.js')) || r?.scope?.includes('/worker/')) || null;
        }
      }
      if (reg?.active) {
        console.log('postToServiceWorker -> reg.active.postMessage', reg.scope);
        reg.active.postMessage(message);
        return true;
      }

      // Best-effort registration; time-bounded
      const newReg = await withTimeout(navigator.serviceWorker.register('/worker/sw.js', { type: 'module' }), 800);
      if (newReg?.active) {
        console.log('postToServiceWorker -> newReg.active.postMessage');
        newReg.active.postMessage(message);
        return true;
      }
    } catch (err) {
      console.error('postToServiceWorker error', err);
    }
    console.warn('postToServiceWorker -> failed to find a target SW');
    return false;
  }

  async function respondToIntentPrompt(payload) {
    console.log('respondToIntentPrompt', payload);
    if (!pendingUiRequest) return;
    console.log('respondToIntentPrompt', 'pendingUiRequest found...');
    const msg = { kind: 'intentUiResponse', data: { correlationId: pendingUiRequest.correlationId, payload } };
    const ok = await postToServiceWorker(msg);
    console.log('respondToIntentPrompt', 'ok', ok);
    if (!ok) {
      // Try a final broadcast as a fallback
      try { navigator.serviceWorker?.controller?.postMessage?.(msg); } catch {}
    }
    setPendingUiRequest(null);
    console.log('respondToIntentPrompt', 'pendingUiRequest set to null');
  }

  useEffect(() => {
    (async () => {
      const m = await connectMessenger();
      setMsgr(m);
      try {
        const info = await m.getDID();
        if (info?.did) setMyDid(info.did);
      } catch {}
    })();
  }, []);

  async function handleDiscover() {
    if (!msgr) return;
    setDiscovering(true);
    setProviders({});
    setSelectedProvider('');
    try {
      const capsMap = await msgr.intentDiscover([selectedGoalCode], 1000);
      setProviders(capsMap || {});
      const first = Object.keys(capsMap || {})[0] || '';
      setSelectedProvider(first);
    } catch (err) {
      console.error(err);
    } finally {
      setDiscovering(false);
    }
  }

  function buildRequestBody() {
    switch (selectedGoalCode) {
      case INTENTS['Pick Date/Time']:
        return { params: {}, return: { expect: 'result', progress: false } };
      case INTENTS['Compose Email']:
        return {
          params: { to: [emailTo].filter(Boolean), subject: emailSubject, body: emailBody },
          return: { expect: 'result', progress: false }
        };
      case INTENTS['Share']:
        return {
          params: { text: shareText },
          return: { expect: 'result', progress: false }
        };
      case INTENTS['Open URL']:
        return {
          params: { url: openUrl },
          return: { expect: 'result', progress: false }
        };
      case INTENTS['Pick File']:
        return { params: {}, return: { expect: 'result', progress: false } };
      case INTENTS['Dial Call']:
        return { params: { phone_number: dialNumber }, return: { expect: 'result', progress: false } };
      case INTENTS['Pick Contact']:
        return { params: {}, return: { expect: 'result', progress: false } };
      case INTENTS['Pick Location']:
        return { params: {}, return: { expect: 'result', progress: false } };
      case INTENTS['Capture Photo']:
      case INTENTS['Capture Video']:
      case INTENTS['Capture Audio']:
        return { params: {}, return: { expect: 'result', progress: false } };
      case INTENTS['Scan QR']:
      case INTENTS['Scan Document']:
        return { params: {}, return: { expect: 'result', progress: false } };
      case INTENTS['Open Map Navigation']:
        return { params: { destination: { lat: 0, lon: 0 }, label: navDestination }, return: { expect: 'result', progress: false } };
      case INTENTS['Add Calendar Event']:
        {
          const startIso = eventStartIso ? new Date(eventStartIso).toISOString() : new Date().toISOString();
          const endIso = new Date(new Date(startIso).getTime() + 60 * 60 * 1000).toISOString();
          return { params: { summary: eventTitle, start: startIso, end: endIso }, return: { expect: 'result', progress: false } };
        }
      case INTENTS['Add Contact']:
        return { params: { name: contactName, phones: [contactPhone].filter(Boolean) }, return: { expect: 'result', progress: false } };
      case INTENTS['Save To']:
        return { params: { attachment_id: 'att_demo', suggested_filename: saveFileName }, return: { expect: 'result', progress: false } };
      case INTENTS['Print']:
        return { params: { attachment_id: 'att_demo', copies: Number(printPages || 1) }, return: { expect: 'result', progress: false } };
      case INTENTS['Translate']:
        return { params: { text: translateText, target_lang: translateTo }, return: { expect: 'result', progress: false } };
      case INTENTS['Pay']:
        return { params: { amount: { currency: payCurrency, value: String(payAmount || '0') } }, return: { expect: 'result', progress: false } };
      case INTENTS['Sign']:
        return { params: { payload_base64: btoa(unescape(encodeURIComponent(signPayload))), format: 'raw' }, return: { expect: 'result', progress: false } };
      case INTENTS['Verify Signature']:
        return { params: { format: 'raw', value: verifySignature, payload_base64: btoa(unescape(encodeURIComponent(verifyPayload))) }, return: { expect: 'result', progress: false } };
      case INTENTS['Encrypt']:
        return { params: { payload_base64: btoa(unescape(encodeURIComponent(encryptPlaintext))) }, return: { expect: 'result', progress: false } };
      case INTENTS['Decrypt']:
        return { params: { ciphertext_base64: btoa(unescape(encodeURIComponent(decryptCiphertext))) }, return: { expect: 'result', progress: false } };
      default:
        return { params: {}, return: { expect: 'result', progress: false } };
    }
  }

  async function handleSend() {
    if (!msgr || !selectedProvider) return;
    setSending(true);
    setResult(null);
    try {
      const body = buildRequestBody();
      const requestType = `${APP_INTENT_BASE}/${selectedGoalCode}-request`;
      const res = await msgr.intentRequest(
        selectedProvider,
        body,
        {
          waitForResult,
          timeout: Number(timeoutMs || DEFAULT_TIMEOUT),
          requestType
        }
      );
      setResult({ ok: true, request: body, response: res });
    } catch (err) {
      setResult({ ok: false, error: String(err) });
    } finally {
      setSending(false);
    }
  }

  const providerOptions = Object.keys(providers || {});

  return (
    <div style={{ padding: '1rem', display: 'grid', gap: '1rem' }}>
      <section>
        <h2 style={{ margin: 0, fontSize: '1.1rem' }}>Intent Lab</h2>
        <div style={{ color: '#666', marginTop: '0.25rem' }}>Your DID: {myDid || '...'}</div>
      </section>

      <section style={{ display: 'grid', gap: '0.75rem' }}>
        <div>
          <label style={{ display: 'block', fontWeight: 600 }}>Intent</label>
          <select
            value={selectedIntentLabel}
            onChange={(e) => setSelectedIntentLabel(e.target.value)}
            style={{ padding: '0.4rem', minWidth: '16rem' }}
          >
            {Object.keys(INTENTS).map((label) => (
              <option key={label} value={label}>{label}</option>
            ))}
          </select>
          <div style={{ fontSize: '0.8rem', color: '#666', marginTop: '0.25rem' }}>{selectedGoalCode}</div>
        </div>

        <div>
          <button onClick={handleDiscover} disabled={!msgr || discovering}>
            {discovering ? 'Discovering…' : 'Discover Providers'}
          </button>
        </div>

        <div>
          <label style={{ display: 'block', fontWeight: 600 }}>Provider</label>
          <select
            value={selectedProvider}
            onChange={(e) => setSelectedProvider(e.target.value)}
            style={{ padding: '0.4rem', minWidth: '24rem' }}
          >
            <option value="">{providerOptions.length ? 'Select…' : 'No providers discovered'}</option>
            {providerOptions.map((did) => (
              <option key={did} value={did}>{did}</option>
            ))}
          </select>
        </div>

        {/* Dynamic params */}
        {selectedGoalCode === INTENTS['Compose Email'] && (
          <div style={{ display: 'grid', gap: '0.5rem' }}>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>To</label>
              <input value={emailTo} onChange={(e) => setEmailTo(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Subject</label>
              <input value={emailSubject} onChange={(e) => setEmailSubject(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Body</label>
              <textarea value={emailBody} onChange={(e) => setEmailBody(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
          </div>
        )}

        {selectedGoalCode === INTENTS['Share'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Text to share</label>
            <textarea value={shareText} onChange={(e) => setShareText(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Open URL'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>URL</label>
            <input value={openUrl} onChange={(e) => setOpenUrl(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Dial Call'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Phone number</label>
            <input value={dialNumber} onChange={(e) => setDialNumber(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Open Map Navigation'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Destination</label>
            <input value={navDestination} onChange={(e) => setNavDestination(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Add Calendar Event'] && (
          <div style={{ display: 'grid', gap: '0.5rem' }}>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Title</label>
              <input value={eventTitle} onChange={(e) => setEventTitle(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Start</label>
              <input type="datetime-local" value={eventStartIso} onChange={(e) => setEventStartIso(e.target.value)} style={{ padding: '0.4rem' }} />
            </div>
          </div>
        )}

        {selectedGoalCode === INTENTS['Add Contact'] && (
          <div style={{ display: 'grid', gap: '0.5rem' }}>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Name</label>
              <input value={contactName} onChange={(e) => setContactName(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Phone</label>
              <input value={contactPhone} onChange={(e) => setContactPhone(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
          </div>
        )}

        {selectedGoalCode === INTENTS['Save To'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Filename</label>
            <input value={saveFileName} onChange={(e) => setSaveFileName(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Print'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Pages</label>
            <input type="number" min="1" value={printPages} onChange={(e) => setPrintPages(e.target.value)} style={{ width: '8rem', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Translate'] && (
          <div style={{ display: 'grid', gap: '0.5rem' }}>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Text</label>
              <textarea value={translateText} onChange={(e) => setTranslateText(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>To (lang)</label>
              <input value={translateTo} onChange={(e) => setTranslateTo(e.target.value)} style={{ width: '12rem', padding: '0.4rem' }} />
            </div>
          </div>
        )}

        {selectedGoalCode === INTENTS['Pay'] && (
          <div style={{ display: 'grid', gap: '0.5rem' }}>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Amount</label>
              <input type="number" step="0.01" value={payAmount} onChange={(e) => setPayAmount(e.target.value)} style={{ width: '10rem', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Currency</label>
              <input value={payCurrency} onChange={(e) => setPayCurrency(e.target.value)} style={{ width: '10rem', padding: '0.4rem' }} />
            </div>
          </div>
        )}

        {selectedGoalCode === INTENTS['Sign'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Payload</label>
            <textarea value={signPayload} onChange={(e) => setSignPayload(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Verify Signature'] && (
          <div style={{ display: 'grid', gap: '0.5rem' }}>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Payload</label>
              <textarea value={verifyPayload} onChange={(e) => setVerifyPayload(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
            <div>
              <label style={{ display: 'block', fontWeight: 600 }}>Signature</label>
              <input value={verifySignature} onChange={(e) => setVerifySignature(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
            </div>
          </div>
        )}

        {selectedGoalCode === INTENTS['Encrypt'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Plaintext</label>
            <textarea value={encryptPlaintext} onChange={(e) => setEncryptPlaintext(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        {selectedGoalCode === INTENTS['Decrypt'] && (
          <div>
            <label style={{ display: 'block', fontWeight: 600 }}>Ciphertext</label>
            <textarea value={decryptCiphertext} onChange={(e) => setDecryptCiphertext(e.target.value)} style={{ width: '100%', padding: '0.4rem' }} />
          </div>
        )}

        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
          <label style={{ display: 'flex', alignItems: 'center', gap: '0.4rem' }}>
            <input type="checkbox" checked={waitForResult} onChange={(e) => setWaitForResult(e.target.checked)} />
            Wait for result
          </label>
          <label style={{ display: 'flex', alignItems: 'center', gap: '0.4rem' }}>
            Timeout (ms)
            <input
              type="number"
              min="0"
              value={timeoutMs}
              onChange={(e) => setTimeoutMs(e.target.value)}
              style={{ width: '8rem', padding: '0.3rem' }}
            />
          </label>
          <button onClick={handleSend} disabled={!msgr || !selectedProvider || sending}>
            {sending ? 'Sending…' : 'Send Intent'}
          </button>
        </div>
      </section>

      <section>
        <h3 style={{ margin: '0 0 0.5rem 0', fontSize: '1rem' }}>Providers</h3>
        <pre style={{ background: '#f7f7f7', padding: '0.5rem', maxHeight: 240, overflow: 'auto' }}>
          {JSON.stringify(providers, null, 2)}
        </pre>
      </section>

      {pendingUiRequest && (
        <section style={{ border: '1px solid #007bff', padding: '0.75rem' }}>
          <h3 style={{ margin: '0 0 0.5rem 0', fontSize: '1rem' }}>Provider Prompt</h3>
          <div style={{ marginBottom: '0.5rem', color: '#555' }}>Action: {pendingUiRequest.action}</div>
          {pendingUiRequest.action === INTENTS['Pick Date/Time'] && (
            <PromptPickDatetime onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Compose Email'] && (
            <PromptComposeEmail onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ to: emailTo, subject: emailSubject, body: emailBody }} />
          )}
          {pendingUiRequest.action === INTENTS['Share'] && (
            <PromptShare onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ text: shareText }} />
          )}
          {pendingUiRequest.action === INTENTS['Open URL'] && (
            <PromptOpenUrl onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ url: openUrl }} />
          )}
          {pendingUiRequest.action === INTENTS['Pick File'] && (
            <PromptPickFile onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Dial Call'] && (
            <PromptDialCall onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ number: dialNumber }} />
          )}
          {pendingUiRequest.action === INTENTS['Pick Contact'] && (
            <PromptPickContact onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Pick Location'] && (
            <PromptPickLocation onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Capture Photo'] && (
            <PromptCapture kind="photo" onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Capture Video'] && (
            <PromptCapture kind="video" onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Capture Audio'] && (
            <PromptCapture kind="audio" onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Scan QR'] && (
            <PromptScanQr onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Scan Document'] && (
            <PromptScanDocument onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} />
          )}
          {pendingUiRequest.action === INTENTS['Open Map Navigation'] && (
            <PromptOpenMapNavigation onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ destination: navDestination }} />
          )}
          {pendingUiRequest.action === INTENTS['Add Calendar Event'] && (
            <PromptAddCalendarEvent onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ title: eventTitle, start_iso: eventStartIso }} />
          )}
          {pendingUiRequest.action === INTENTS['Add Contact'] && (
            <PromptAddContact onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ name: contactName, phone: contactPhone }} />
          )}
          {pendingUiRequest.action === INTENTS['Save To'] && (
            <PromptSaveTo onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ filename: saveFileName }} />
          )}
          {pendingUiRequest.action === INTENTS['Print'] && (
            <PromptPrint onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ pages: Number(printPages || 1) }} />
          )}
          {pendingUiRequest.action === INTENTS['Translate'] && (
            <PromptTranslate onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ text: translateText, to: translateTo }} />
          )}
          {pendingUiRequest.action === INTENTS['Pay'] && (
            <PromptPay onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ amount: Number(payAmount || 0), currency: payCurrency }} />
          )}
          {pendingUiRequest.action === INTENTS['Sign'] && (
            <PromptSign onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ payload: signPayload }} />
          )}
          {pendingUiRequest.action === INTENTS['Verify Signature'] && (
            <PromptVerifySignature onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ payload: verifyPayload, signature: verifySignature }} />
          )}
          {pendingUiRequest.action === INTENTS['Encrypt'] && (
            <PromptEncrypt onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ plaintext: encryptPlaintext }} />
          )}
          {pendingUiRequest.action === INTENTS['Decrypt'] && (
            <PromptDecrypt onSubmit={(payload) => respondToIntentPrompt(payload)} onCancel={() => respondToIntentPrompt(null)} defaults={{ ciphertext: decryptCiphertext }} />
          )}
        </section>
      )}

      <section>
        <h3 style={{ margin: '0 0 0.5rem 0', fontSize: '1rem' }}>Result</h3>
        <pre style={{ background: '#f7f7f7', padding: '0.5rem', maxHeight: 320, overflow: 'auto' }}>
          {result ? JSON.stringify(result, null, 2) : '—'}
        </pre>
      </section>
    </div>
  );
}

function Row({ label, children }) {
  return (
    <div style={{ display: 'grid', gridTemplateColumns: '10rem 1fr', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>
      <div style={{ fontWeight: 600 }}>{label}</div>
      <div>{children}</div>
    </div>
  );
}

function PromptPickDatetime({ onSubmit, onCancel }) {
  const [iso, setIso] = useState(new Date().toISOString().slice(0, 16)); // yyyy-mm-ddThh:mm
  const [tz, setTz] = useState('local');
  return (
    <div>
      <Row label="Date/Time">
        <input type="datetime-local" value={iso} onChange={e => setIso(e.target.value)} />
      </Row>
      <Row label="Time Zone">
        <input value={tz} onChange={e => setTz(e.target.value)} />
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ iso: iso.length < 20 ? new Date(iso).toISOString() : iso, tz })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptComposeEmail({ onSubmit, onCancel, defaults = {} }) {
  const [to, setTo] = useState(defaults.to || '');
  const [subject, setSubject] = useState(defaults.subject || '');
  const [body, setBody] = useState(defaults.body || '');
  const [opened, setOpened] = useState(true);
  return (
    <div>
      <Row label="To"><input value={to} onChange={e => setTo(e.target.value)} /></Row>
      <Row label="Subject"><input value={subject} onChange={e => setSubject(e.target.value)} /></Row>
      <Row label="Body"><textarea value={body} onChange={e => setBody(e.target.value)} /></Row>
      <Row label="Opened?">
        <label><input type="checkbox" checked={opened} onChange={e => setOpened(e.target.checked)} /> Simulate open</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ to: to ? to.split(',').map(s => s.trim()).filter(Boolean) : [], subject, body, opened })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptShare({ onSubmit, onCancel, defaults = {} }) {
  const [text, setText] = useState(defaults.text || '');
  return (
    <div>
      <Row label="Text"><textarea value={text} onChange={e => setText(e.target.value)} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ items: [{ kind: 'text', text }] })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptOpenUrl({ onSubmit, onCancel, defaults = {} }) {
  const [url, setUrl] = useState(defaults.url || '');
  const [opened, setOpened] = useState(true);
  return (
    <div>
      <Row label="URL"><input value={url} onChange={e => setUrl(e.target.value)} /></Row>
      <Row label="Opened?">
        <label><input type="checkbox" checked={opened} onChange={e => setOpened(e.target.checked)} /> Simulate open</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ url, opened })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptPickFile({ onSubmit, onCancel }) {
  const [files, setFiles] = useState([]);
  function onFileChange(e) {
    const list = Array.from(e.target.files || []);
    setFiles(list.map(f => ({ name: f.name, size: f.size, type: f.type })));
  }
  return (
    <div>
      <Row label="Files"><input type="file" multiple onChange={onFileChange} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ files })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}


function PromptDialCall({ onSubmit, onCancel, defaults = {} }) {
  const [number, setNumber] = useState(defaults.number || '');
  const [called, setCalled] = useState(true);
  return (
    <div>
      <Row label="Phone"><input value={number} onChange={e => setNumber(e.target.value)} /></Row>
      <Row label="Call now?">
        <label><input type="checkbox" checked={called} onChange={e => setCalled(e.target.checked)} /> Simulate call</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ number, called })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptPickContact({ onSubmit, onCancel }) {
  const [name, setName] = useState('Alice');
  const [phone, setPhone] = useState('+15550001111');
  return (
    <div>
      <Row label="Name"><input value={name} onChange={e => setName(e.target.value)} /></Row>
      <Row label="Phone"><input value={phone} onChange={e => setPhone(e.target.value)} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ contact: { name, phone } })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptPickLocation({ onSubmit, onCancel }) {
  const [lat, setLat] = useState('37.422');
  const [lon, setLon] = useState('-122.084');
  const [label, setLabel] = useState('Googleplex');
  return (
    <div>
      <Row label="Latitude"><input value={lat} onChange={e => setLat(e.target.value)} /></Row>
      <Row label="Longitude"><input value={lon} onChange={e => setLon(e.target.value)} /></Row>
      <Row label="Label"><input value={label} onChange={e => setLabel(e.target.value)} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ lat, lon, label })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptCapture({ onSubmit, onCancel, kind = 'photo' }) {
  const [captured, setCaptured] = useState(true);
  return (
    <div>
      <Row label={`Capture ${kind}?`}>
        <label><input type="checkbox" checked={captured} onChange={e => setCaptured(e.target.checked)} /> Simulate capture</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ captured })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptScanQr({ onSubmit, onCancel }) {
  const [content, setContent] = useState('https://example.com');
  return (
    <div>
      <Row label="QR Content"><input value={content} onChange={e => setContent(e.target.value)} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ content })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptScanDocument({ onSubmit, onCancel }) {
  const [pages, setPages] = useState(1);
  return (
    <div>
      <Row label="Pages"><input type="number" min="1" value={pages} onChange={e => setPages(Number(e.target.value || 1))} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ pages })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptOpenMapNavigation({ onSubmit, onCancel, defaults = {} }) {
  const [destination, setDestination] = useState(defaults.destination || '');
  const [opened, setOpened] = useState(true);
  return (
    <div>
      <Row label="Destination"><input value={destination} onChange={e => setDestination(e.target.value)} /></Row>
      <Row label="Opened?">
        <label><input type="checkbox" checked={opened} onChange={e => setOpened(e.target.checked)} /> Simulate open</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ destination, opened })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptAddCalendarEvent({ onSubmit, onCancel, defaults = {} }) {
  const [title, setTitle] = useState(defaults.title || '');
  const [startIso, setStartIso] = useState(defaults.start_iso || new Date().toISOString().slice(0, 16));
  return (
    <div>
      <Row label="Title"><input value={title} onChange={e => setTitle(e.target.value)} /></Row>
      <Row label="Start"><input type="datetime-local" value={startIso} onChange={e => setStartIso(e.target.value)} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ title, start_iso: startIso })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptAddContact({ onSubmit, onCancel, defaults = {} }) {
  const [name, setName] = useState(defaults.name || '');
  const [phone, setPhone] = useState(defaults.phone || '');
  return (
    <div>
      <Row label="Name"><input value={name} onChange={e => setName(e.target.value)} /></Row>
      <Row label="Phone"><input value={phone} onChange={e => setPhone(e.target.value)} /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ name, phone })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptSaveTo({ onSubmit, onCancel, defaults = {} }) {
  const [filename, setFilename] = useState(defaults.filename || 'file.txt');
  const [saved, setSaved] = useState(true);
  return (
    <div>
      <Row label="Filename"><input value={filename} onChange={e => setFilename(e.target.value)} /></Row>
      <Row label="Saved?">
        <label><input type="checkbox" checked={saved} onChange={e => setSaved(e.target.checked)} /> Simulate save</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ saved, location: filename })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptPrint({ onSubmit, onCancel, defaults = {} }) {
  const [pages, setPages] = useState(Number(defaults.pages || 1));
  const [printed, setPrinted] = useState(true);
  return (
    <div>
      <Row label="Pages"><input type="number" min="1" value={pages} onChange={e => setPages(Number(e.target.value || 1))} /></Row>
      <Row label="Printed?">
        <label><input type="checkbox" checked={printed} onChange={e => setPrinted(e.target.checked)} /> Simulate print</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ printed, pages })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptTranslate({ onSubmit, onCancel, defaults = {} }) {
  const [text, setText] = useState(defaults.text || '');
  const [to, setTo] = useState(defaults.to || 'en');
  const [translated, setTranslated] = useState('');
  return (
    <div>
      <Row label="Text"><textarea value={text} onChange={e => setText(e.target.value)} /></Row>
      <Row label="To"><input value={to} onChange={e => setTo(e.target.value)} /></Row>
      <Row label="Translated"><textarea value={translated} onChange={e => setTranslated(e.target.value)} placeholder="leave empty to auto" /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ text, to, translated: translated || undefined })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptPay({ onSubmit, onCancel, defaults = {} }) {
  const [amount, setAmount] = useState(Number(defaults.amount || 0));
  const [currency, setCurrency] = useState(defaults.currency || 'USD');
  const [paid, setPaid] = useState(true);
  return (
    <div>
      <Row label="Amount"><input type="number" step="0.01" value={amount} onChange={e => setAmount(Number(e.target.value || 0))} /></Row>
      <Row label="Currency"><input value={currency} onChange={e => setCurrency(e.target.value)} /></Row>
      <Row label="Paid?">
        <label><input type="checkbox" checked={paid} onChange={e => setPaid(e.target.checked)} /> Simulate payment</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ amount, currency, paid })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptSign({ onSubmit, onCancel, defaults = {} }) {
  const [payload, setPayload] = useState(defaults.payload || '');
  const [signature, setSignature] = useState('');
  return (
    <div>
      <Row label="Payload"><textarea value={payload} onChange={e => setPayload(e.target.value)} /></Row>
      <Row label="Signature"><input value={signature} onChange={e => setSignature(e.target.value)} placeholder="leave empty to auto" /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ payload, signature: signature || undefined })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptVerifySignature({ onSubmit, onCancel, defaults = {} }) {
  const [payload, setPayload] = useState(defaults.payload || '');
  const [signature, setSignature] = useState(defaults.signature || '');
  const [valid, setValid] = useState(true);
  return (
    <div>
      <Row label="Payload"><textarea value={payload} onChange={e => setPayload(e.target.value)} /></Row>
      <Row label="Signature"><input value={signature} onChange={e => setSignature(e.target.value)} /></Row>
      <Row label="Valid?">
        <label><input type="checkbox" checked={valid} onChange={e => setValid(e.target.checked)} /> Simulate valid</label>
      </Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ payload, signature, valid })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptEncrypt({ onSubmit, onCancel, defaults = {} }) {
  const [plaintext, setPlaintext] = useState(defaults.plaintext || '');
  const [ciphertext, setCiphertext] = useState('');
  return (
    <div>
      <Row label="Plaintext"><textarea value={plaintext} onChange={e => setPlaintext(e.target.value)} /></Row>
      <Row label="Ciphertext"><textarea value={ciphertext} onChange={e => setCiphertext(e.target.value)} placeholder="leave empty to auto" /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ plaintext, ciphertext: ciphertext || undefined })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}

function PromptDecrypt({ onSubmit, onCancel, defaults = {} }) {
  const [ciphertext, setCiphertext] = useState(defaults.ciphertext || '');
  const [plaintext, setPlaintext] = useState('');
  return (
    <div>
      <Row label="Ciphertext"><textarea value={ciphertext} onChange={e => setCiphertext(e.target.value)} /></Row>
      <Row label="Plaintext"><textarea value={plaintext} onChange={e => setPlaintext(e.target.value)} placeholder="enter decrypted text" /></Row>
      <div style={{ display: 'flex', gap: '0.5rem' }}>
        <button onClick={() => onSubmit({ ciphertext, plaintext })}>OK</button>
        <button onClick={onCancel}>Cancel</button>
      </div>
    </div>
  );
}


